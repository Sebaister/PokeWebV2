import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import { Pokemon } from '../../types/pokemon';

interface PokemonCardProps {
  pokemon: Pokemon;
}

export default function PokemonCard({ pokemon }: PokemonCardProps) {
  return (
    <motion.div
      whileHover={{ y: -5 }}
      className="card bg-base-100 shadow-xl overflow-hidden"
    >
      <Link to={`/pokemon/${pokemon.id}`}>
        <figure className="px-4 pt-4 bg-gray-100 dark:bg-gray-800">
          <img
            src={pokemon.sprites.other['official-artwork'].front_default || pokemon.sprites.front_default}
            alt={pokemon.name}
            className="w-32 h-32 object-contain"
            loading="lazy"
            onError={(e) => {
              (e.target as HTMLImageElement).src = '/placeholder-pokemon.png';
            }}
          />
        </figure>
        <div className="card-body p-4">
          <h2 className="card-title text-lg capitalize">
            {pokemon.name.replace(/-/g, ' ')}
            <span className="text-sm text-gray-500">#{pokemon.id.toString().padStart(3, '0')}</span>
          </h2>
          <div className="flex flex-wrap gap-1 mt-2">
            {pokemon.types.map(type => (
              <span
                key={type.type.name}
                className="badge capitalize"
                style={{ backgroundColor: getTypeColor(type.type.name) }}
              >
                {type.type.name}
              </span>
            ))}
          </div>
        </div>
      </Link>
    </motion.div>
  );
}

function getTypeColor(type: string): string {
  const typeColors: Record<string, string> = {
    normal: '#A8A878',
    fire: '#F08030',
    water: '#6890F0',
    electric: '#F8D030',
    grass: '#78C850',
    ice: '#98D8D8',
    fighting: '#C03028',
    poison: '#A040A0',
    ground: '#E0C068',
    flying: '#A890F0',
    psychic: '#F85888',
    bug: '#A8B820',
    rock: '#B8A038',
    ghost: '#705898',
    dragon: '#7038F8',
    dark: '#705848',
    steel: '#B8B8D0',
    fairy: '#EE99AC'
  };
  
  return typeColors[type] || '#777777';
}